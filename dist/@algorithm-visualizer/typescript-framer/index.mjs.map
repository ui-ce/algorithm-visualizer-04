{"version":3,"sources":["../../../modules/framer/typescript-framer/src/models/recorder/array-2d/array-2d-action.enum.ts","../../../modules/framer/typescript-framer/src/framers/array-2d-framer.ts","../../../modules/framer/typescript-framer/src/models/recorder/chart/chart-action.enum.ts","../../../modules/framer/typescript-framer/src/framers/chart-framer.ts","../../../modules/framer/typescript-framer/src/models/recorder/graph/graph-action.enum.ts","../../../modules/framer/typescript-framer/src/framers/graph-framer.ts","../../../modules/framer/typescript-framer/src/models/recorder/log/log-action.enum.ts","../../../modules/framer/typescript-framer/src/framers/log-framer.ts","../../../modules/framer/typescript-framer/src/framers/framer-engine.ts"],"sourcesContent":["export enum Array2DAction {\r\n  SET_CELLS = 'SetCells',\r\n  INSERT_CELLS = 'InsertCells',\r\n  REMOVE_CELLS = 'RemoveCells',\r\n  PUSH_CELLS = 'PushCells',\r\n  POP_CELLS = 'PopCells',\r\n  SHIFT_CELLS = 'ShiftCells',\r\n  UNSHIFT_CELLS = 'UnshiftCells',\r\n  INSERT_ROWS = 'InsertRows',\r\n  PUSH_ROWS = 'PushRows',\r\n  POP_ROWS = 'PopRows',\r\n  SHIFT_ROWS = 'ShiftRows',\r\n  UNSHIFT_ROWS = 'UnshiftRows',\r\n  SET_CELLS_HIGHLIGHT = 'SetCellsHighlight',\r\n  CLEAR_CELLS_HIGHLIGHT = 'ClearCellsHighlight',\r\n  CLEAR_ALL_CELLS_HIGHLIGHT = 'ClearAllCellsHighlight',\r\n  CLEAR_ALL_ROWS_HIGHLIGHT = 'ClearAllRowsHighlight',\r\n}","import { IFramer } from '../models/framer/i-framer.interface';\r\nimport { Array2DInitParams } from '../models/recorder/array-2d/array-2d-init-params.type';\r\nimport { Array2DAction } from '../models/recorder/array-2d/array-2d-action.enum';\r\nimport { Array2DSetCellsParams } from '../models/recorder/array-2d/array-2d-set-cells-params.type';\r\nimport { Array2DInsertCellsParams } from '../models/recorder/array-2d/array-2d-insert-cells-params.type';\r\nimport { Array2DPushCellsParams } from '../models/recorder/array-2d/array-2d-push-cells-params.type';\r\nimport { Array2DPopCellsParams } from '../models/recorder/array-2d/array-2d-pop-cells-params.type';\r\nimport { Array2DInsertRowsParams } from '../models/recorder/array-2d/array-2d-insert-rows-params.type';\r\nimport { Array2DPushRowsParams } from '../models/recorder/array-2d/array-2d-push-rows-params.type';\r\nimport { Array2DPopRowParams } from '../models/recorder/array-2d/array-2d-pop-row-params.type';\r\nimport { Array2d } from '../models/framer/array-2d/array-2d.type';\r\nimport { Array2dState } from '../models/framer/array-2d/array-2d-state.type';\r\nimport { FrameState } from '../models/framer/frame-state.type';\r\nimport { Array2dCell } from '../models/framer/array-2d/array-2d-cell.type';\r\nimport { Array2DSetCellsHighlightParams } from '../models/recorder/array-2d/array-2d-set-cells-highlight-params.type';\r\nimport { Array2DClearCellsHighlightParams } from '../models/recorder/array-2d/array-2d-clear-cells-highlight-params.type';\r\nimport { Array2DShiftRowsParams } from '../models/recorder/array-2d/array-2d-shift-rows-params.type';\r\nimport { Array2DUnshiftRowsParams } from '../models/recorder/array-2d/array-2d-unshift-rows-params.type';\r\nimport { Array2DRemoveCellsParams } from '../models/recorder/array-2d/array-2d-remove-cells-params.type';\r\nimport { Array2DShiftCellsParams } from '../models/recorder/array-2d/array-2d-shift-cells-params.type';\r\nimport { Array2DUnshiftCellsParams } from '../models/recorder/array-2d/array-2d-unshift-cells-params.type';\r\nimport {\r\n  Array2DClearAllRowsHighlightParams\r\n} from '../models/recorder/array-2d/array-2d-clear-all-rows-highlight-params.type';\r\nimport {\r\n  Array2DClearAllCellsHighlightParams\r\n} from '../models/recorder/array-2d/array-2d-clear-all-cells-highlight-params.type';\r\n\r\nexport class Array2DFramer implements IFramer {\r\n  private _id: string;\r\n  private _array2D: Array2d;\r\n\r\n  public initialize(id: string, param: Array2DInitParams): void {\r\n    this._id = id;\r\n    this._array2D = {\r\n      name: param.name,\r\n      values: param.values.map(row =>\r\n        row.map(item => ({ value: item, highlightTags: [] }))\r\n      ),\r\n    };\r\n  }\r\n\r\n  public applyAction(action: string, param: unknown): void {\r\n    switch (action) {\r\n      case Array2DAction.SET_CELLS:\r\n        this.setCells(param as Array2DSetCellsParams);\r\n        break;\r\n      case Array2DAction.INSERT_CELLS:\r\n        this.insertCells(param as Array2DInsertCellsParams);\r\n        break;\r\n      case Array2DAction.REMOVE_CELLS:\r\n        this.removeCells(param as Array2DRemoveCellsParams);\r\n        break;\r\n      case Array2DAction.PUSH_CELLS:\r\n        this.pushCells(param as Array2DPushCellsParams);\r\n        break;\r\n      case Array2DAction.POP_CELLS:\r\n        this.popCells(param as Array2DPopCellsParams);\r\n        break;\r\n      case Array2DAction.SHIFT_CELLS:\r\n        this.shiftCells(param as Array2DShiftCellsParams);\r\n        break;\r\n      case Array2DAction.UNSHIFT_CELLS:\r\n        this.unshiftCells(param as Array2DUnshiftCellsParams);\r\n        break;\r\n      case Array2DAction.INSERT_ROWS:\r\n        this.insertRows(param as Array2DInsertRowsParams);\r\n        break;\r\n      case Array2DAction.PUSH_ROWS:\r\n        this.pushRows(param as Array2DPushRowsParams);\r\n        break;\r\n      case Array2DAction.POP_ROWS:\r\n        this.popRows(param as Array2DPopRowParams);\r\n        break;\r\n      case Array2DAction.SHIFT_ROWS:\r\n        this.shiftRows(param as Array2DShiftRowsParams);\r\n        break;\r\n      case Array2DAction.UNSHIFT_ROWS:\r\n        this.unshiftRows(param as Array2DUnshiftRowsParams);\r\n        break;\r\n      case Array2DAction.SET_CELLS_HIGHLIGHT:\r\n        this.setCellsHighlight(param as Array2DSetCellsHighlightParams);\r\n        break;\r\n      case Array2DAction.CLEAR_CELLS_HIGHLIGHT:\r\n        this.clearCellsHighlight(param as Array2DClearCellsHighlightParams);\r\n        break;\r\n      case Array2DAction.CLEAR_ALL_CELLS_HIGHLIGHT:\r\n        this.clearAllCellsHighlight(param as Array2DClearAllCellsHighlightParams);\r\n        break;\r\n      case Array2DAction.CLEAR_ALL_ROWS_HIGHLIGHT:\r\n        this.clearAllRowsHighlight(param as Array2DClearAllRowsHighlightParams);\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown Array2DAction: ${action}`);\r\n    }\r\n  }\r\n\r\n  private setCells({ rowIndex, startIndex, values }: Array2DSetCellsParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n    if (!row) return;\r\n\r\n    values.forEach((value, idx) => {\r\n      const targetIndex = startIndex + idx;\r\n      if (row[targetIndex]) {\r\n        const oldCell = row[targetIndex];\r\n        row[targetIndex] = { ...oldCell, value };\r\n      }\r\n    });\r\n  }\r\n\r\n  private insertCells({ rowIndex, index, values }: Array2DInsertCellsParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n    if (!row) return;\r\n\r\n    const cells: Array2dCell[] = values.map(v => ({ value: v, highlightTags: [] }));\r\n    row.splice(index, 0, ...cells);\r\n  }\r\n\r\n  private removeCells({ rowIndex, index, count }: Array2DRemoveCellsParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n    if (!row) return;\r\n\r\n    row.splice(index, count);\r\n  }\r\n\r\n  private pushCells({ rowIndex, values }: Array2DPushCellsParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n    if (!row) return;\r\n\r\n    const cells: Array2dCell[] = values.map(v => ({ value: v, highlightTags: [] }));\r\n    row.push(...cells);\r\n  }\r\n\r\n  private popCells({ rowIndex, count }: Array2DPopCellsParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n    if (!row) return;\r\n\r\n    row.splice(-count, count);\r\n  }\r\n\r\n  private shiftCells({ rowIndex, count }: Array2DShiftCellsParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n    if (!row) return;\r\n\r\n    row.splice(0, count);\r\n  }\r\n\r\n  private unshiftCells({ rowIndex, values }: Array2DUnshiftCellsParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n    if (!row) return;\r\n\r\n    const cells: Array2dCell[] = values.map(v => ({ value: v, highlightTags: [] }));\r\n    row.unshift(...cells);\r\n  }\r\n\r\n  private insertRows({ rowIndex, values }: Array2DInsertRowsParams): void {\r\n    const rows: Array2dCell[][] = values.map(r =>\r\n      r.map(item => ({ value: item, highlightTags: [] }))\r\n    );\r\n    this._array2D.values.splice(rowIndex, 0, ...rows);\r\n  }\r\n\r\n  private pushRows({ values }: Array2DPushRowsParams): void {\r\n    const rows: Array2dCell[][] = values.map(r =>\r\n      r.map(item => ({ value: item, highlightTags: [] }))\r\n    );\r\n    this._array2D.values.push(...rows);\r\n  }\r\n\r\n  private popRows({ count }: Array2DPopRowParams): void {\r\n    this._array2D.values.splice(-count, count);\r\n  }\r\n\r\n  private shiftRows({ count }: Array2DShiftRowsParams): void {\r\n    this._array2D.values.splice(0, count);\r\n  }\r\n\r\n  private unshiftRows({ values }: Array2DUnshiftRowsParams): void {\r\n    const rows: Array2dCell[][] = values.map(r =>\r\n      r.map(item => ({ value: item, highlightTags: [] }))\r\n    );\r\n    this._array2D.values.unshift(...rows);\r\n  }\r\n\r\n  private setCellsHighlight({ rowIndex, startIndex, endIndex, highlightTags }: Array2DSetCellsHighlightParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n    if (!row) return;\r\n\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n      if (row[i]) {\r\n        row[i].highlightTags = [...highlightTags];\r\n      }\r\n    }\r\n  }\r\n\r\n  private clearCellsHighlight({ rowIndex, startIndex, endIndex }: Array2DClearCellsHighlightParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n    if (!row) return;\r\n\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n      if (row[i]) {\r\n        row[i].highlightTags = [];\r\n      }\r\n    }\r\n  }\r\n\r\n  private clearAllCellsHighlight({ rowIndex }: Array2DClearAllCellsHighlightParams): void {\r\n    const row = this._array2D.values[rowIndex];\r\n\r\n    if (!row) {\r\n      return;\r\n    }\r\n\r\n    row.forEach((cell) => cell.highlightTags = []);\r\n  }\r\n\r\n  private clearAllRowsHighlight(params: Array2DClearAllRowsHighlightParams): void {\r\n    this._array2D.values.forEach(row  => row.forEach((cell) => cell.highlightTags = []));\r\n  }\r\n\r\n  public getFrameState(): FrameState<Array2dState> {\r\n    return {\r\n      id: this._id,\r\n      type: 'Array2D',\r\n      state: this._array2D,\r\n    };\r\n  }\r\n}\r\n","export enum ChartAction {\r\n  SET_CELLS = 'SetCells',\r\n  REMOVE_CELLS = 'RemoveCells',\r\n  INSERT_CELLS = 'InsertCells',\r\n  PUSH_CELLS = 'PushCells',\r\n  POP_CELLS = 'PopCells',\r\n  SHIFT_CELLS = 'ShiftCells',\r\n  UNSHIFT_CELLS = 'UnshiftCells',\r\n  SET_CELLS_HIGHLIGHT = 'SetCellsHighlight',\r\n  CLEAR_CELLS_HIGHLIGHT = 'ClearCellsHighlight'\r\n}","import { IFramer } from '../models/framer/i-framer.interface';\r\nimport { ChartAction } from '../models/recorder/chart/chart-action.enum';\r\nimport { ChartShiftCellsParams } from '../models/recorder/chart/chart-shift-cells-params.type';\r\nimport { ChartUnshiftCellsParams } from '../models/recorder/chart/chart-unshift-cells-params.type';\r\nimport { FrameState } from '../models/framer/frame-state.type';\r\nimport { Chart } from '../models/framer/chart/chart.type';\r\nimport { ChartState } from '../models/framer/chart/chart-state.type';\r\nimport { ChartBar } from '../models/framer/chart/chart-bar.type';\r\nimport { ChartRemoveCellsParams } from '../models/recorder/chart/chart-remove-cells-params.type';\r\nimport { ChartInitParams } from '../models/recorder/chart/chart-init-params.type';\r\nimport { ChartSetCellsParams } from '../models/recorder/chart/chart-set-cells-params.type';\r\nimport { ChartInsertCellsParams } from '../models/recorder/chart/chart-insert-cells-params.type';\r\nimport { ChartPushCellsParams } from '../models/recorder/chart/chart-push-cells-params.type';\r\nimport { ChartPopCellsParams } from '../models/recorder/chart/chart-pop-cells-params.type';\r\nimport { ChartSetCellsHighlightParams } from '../models/recorder/chart/chart-set-cells-highlight-params.type';\r\nimport { ChartClearCellsHighlightParams } from '../models/recorder/chart/chart-clear-cells-highlight-params.type';\r\n\r\nexport class ChartFramer implements IFramer {\r\n  private _id: string;\r\n  private _chart: Chart;\r\n\r\n  public initialize(id: string, param: ChartInitParams): void {\r\n    this._id = id;\r\n    this._chart = {\r\n      name: param.name,\r\n      bars: param.values.map(v => ({\r\n        value: v.value,\r\n        label: v.label ?? null,\r\n        highlightTags: []\r\n      })),\r\n    };\r\n  }\r\n\r\n  public applyAction(action: string, param: unknown): void {\r\n    switch(action) {\r\n      case ChartAction.SET_CELLS:\r\n        this.setCells(param as ChartSetCellsParams);\r\n        break;\r\n      case ChartAction.INSERT_CELLS:\r\n        this.insertCells(param as ChartInsertCellsParams);\r\n        break;\r\n      case ChartAction.REMOVE_CELLS:\r\n        this.removeCells(param as ChartRemoveCellsParams);\r\n        break;\r\n      case ChartAction.PUSH_CELLS:\r\n        this.pushCells(param as ChartPushCellsParams);\r\n        break;\r\n      case ChartAction.POP_CELLS:\r\n        this.popCells(param as ChartPopCellsParams);\r\n        break;\r\n      case ChartAction.SHIFT_CELLS:\r\n        this.shiftCells(param as ChartShiftCellsParams);\r\n        break;\r\n      case ChartAction.UNSHIFT_CELLS:\r\n        this.unshiftCells(param as ChartUnshiftCellsParams);\r\n        break;\r\n      case ChartAction.SET_CELLS_HIGHLIGHT:\r\n        this.setCellsHighlight(param as ChartSetCellsHighlightParams);\r\n        break;\r\n      case ChartAction.CLEAR_CELLS_HIGHLIGHT:\r\n        this.clearCellsHighlight(param as ChartClearCellsHighlightParams);\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown ChartAction: ${action}`);\r\n    }\r\n  }\r\n\r\n  private setCells({ startIndex, values }: ChartSetCellsParams): void {\r\n    for (let i = 0; i < values.length; i++) {\r\n      const target = this._chart.bars[startIndex + i];\r\n      target.value = values[i].value;\r\n      target.label = values[i].label ?? null;\r\n    }\r\n  }\r\n\r\n  private insertCells({ index, values }: ChartInsertCellsParams): void {\r\n    const newBars: ChartBar[] = values.map(v => ({\r\n      value: v.value,\r\n      label: v.label ?? null,\r\n      highlightTags: []\r\n    }));\r\n    this._chart.bars.splice(index, 0, ...newBars);\r\n  }\r\n\r\n  private removeCells({ index, count }: ChartRemoveCellsParams): void {\r\n    this._chart.bars.splice(index, count);\r\n  }\r\n\r\n  private pushCells({ values }: ChartPushCellsParams): void {\r\n    const newBars: ChartBar[] = values.map(v => ({\r\n      value: v.value,\r\n      label: v.label ?? null,\r\n      highlightTags: []\r\n    }));\r\n    this._chart.bars.push(...newBars);\r\n  }\r\n\r\n  private popCells({ count }: ChartPopCellsParams): void {\r\n    this._chart.bars.splice(-count, count);\r\n  }\r\n\r\n  private shiftCells({ count }: ChartShiftCellsParams): void {\r\n    this._chart.bars.splice(0, count);\r\n  }\r\n\r\n  private unshiftCells({ values }: ChartUnshiftCellsParams): void {\r\n    const newBars: ChartBar[] = values.map(v => ({\r\n      value: v.value,\r\n      label: v.label ?? null,\r\n      highlightTags: []\r\n    }));\r\n    this._chart.bars.unshift(...newBars);\r\n  }\r\n\r\n  private setCellsHighlight({ startIndex, endIndex, highlightTags }: ChartSetCellsHighlightParams): void {\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n      this._chart.bars[i].highlightTags = highlightTags;\r\n    }\r\n  }\r\n\r\n  private clearCellsHighlight({ startIndex, endIndex }: ChartClearCellsHighlightParams): void {\r\n    for (let i = startIndex; i <= endIndex; i++) {\r\n      this._chart.bars[i].highlightTags = [];\r\n    }\r\n  }\r\n\r\n  public getFrameState(): FrameState<ChartState> {\r\n    return {\r\n      id: this._id,\r\n      type: 'Chart',\r\n      state: {\r\n        name: this._chart.name,\r\n        bars: this._chart.bars,\r\n      },\r\n    };\r\n  }\r\n}\r\n","export enum GraphAction {\r\n  ADD_NODE = 'AddNode',\r\n  REMOVE_NODE = 'RemoveNode',\r\n  ADD_EDGE = 'AddEdge',\r\n  REMOVE_EDGE = 'RemoveEdge',\r\n  REMOVE_EDGES = 'RemoveEdges',\r\n  SET_NODE_HIGHLIGHT = 'SetNodeHighlight',\r\n  CLEAR_NODE_HIGHLIGHT = 'ClearNodeHighlight',\r\n  CLEAR_ALL_NODES_HIGHLIGHT = 'ClearAllNodesHighlight',\r\n  SET_EDGE_HIGHLIGHT = 'SetEdgeHighlight',\r\n  SET_EDGES_HIGHLIGHT = 'SetEdgesHighlight',\r\n  CLEAR_EDGE_HIGHLIGHT = 'ClearEdgeHighlight',\r\n  CLEAR_EDGES_HIGHLIGHT = 'ClearEdgesHighlight',\r\n  CLEAR_ALL_EDGES_HIGHLIGHT = 'ClearAllEdgesHighlight',\r\n}\r\n","import { IFramer } from '../models/framer/i-framer.interface';\r\nimport { FrameState } from '../models/framer/frame-state.type';\r\nimport { GraphAction } from '../models/recorder/graph/graph-action.enum';\r\nimport { GraphAddNodeParams } from '../models/recorder/graph/graph-add-node-params.type';\r\nimport { GraphRemoveNodeParams } from '../models/recorder/graph/graph-remove-node-params.type';\r\nimport { GraphAddEdgeParams } from '../models/recorder/graph/graph-add-edge-params.type';\r\nimport { GraphRemoveEdgeParams } from '../models/recorder/graph/graph-remove-edge-params.type';\r\nimport { GraphSetNodeHighlightParams } from '../models/recorder/graph/graph-set-node-highlight-params.type';\r\nimport { GraphClearNodeHighlightParams } from '../models/recorder/graph/graph-clear-node-highlight-params.type';\r\nimport { GraphSetEdgeHighlightParams } from '../models/recorder/graph/graph-set-edge-highlight-params.type';\r\nimport { GraphClearEdgeHighlightParams } from '../models/recorder/graph/graph-clear-edge-highlight-params.type';\r\nimport { GraphState } from '../models/framer/graph/graph-state.type';\r\nimport { GraphInitParams } from '../models/recorder/graph/graph-init-params.type';\r\nimport { GraphRemoveEdgesParams } from '../models/recorder/graph/graph-remove-edges-params.type';\r\nimport { GraphClearEdgesHighlightParams } from '../models/recorder/graph/graph-clear-edges-highlight-params.type';\r\nimport { GraphSetEdgesHighlightParams } from '../models/recorder/graph/graph-set-edges-highlight-params.type';\r\nimport {\r\n  GraphClearAllEdgesHighlightParams\r\n} from '../models/recorder/graph/graph-clear-all-edges-highlight-params.type';\r\nimport {\r\n  GraphClearAllNodesHighlightParams\r\n} from '../models/recorder/graph/graph-clear-all-nodes-highlight-params.type';\r\n\r\nexport class GraphFramer implements IFramer {\r\n  private _id: string;\r\n  private _graphState: GraphState;\r\n\r\n\r\n  public initialize(id: string, param: GraphInitParams): void {\r\n    this._id = id;\r\n    this._graphState = {\r\n      name: param.name,\r\n      isDirected: param.isDirected,\r\n      nodes: param.nodes.map(node => ({\r\n        id: node.id,\r\n        label: node.label ?? null,\r\n        highlightTags: [],\r\n      })),\r\n      edges: param.edges.map(edge => ({\r\n        id: edge.id,\r\n        source: edge.source,\r\n        target: edge.target,\r\n        label: edge.label ?? null,\r\n        highlightTags: [],\r\n      })),\r\n    };\r\n  }\r\n\r\n  public applyAction(action: string, param: unknown): void {\r\n    switch (action) {\r\n      case GraphAction.ADD_NODE:\r\n        this.addNode(param as GraphAddNodeParams);\r\n        break;\r\n      case GraphAction.REMOVE_NODE:\r\n        this.removeNode(param as GraphRemoveNodeParams);\r\n        break;\r\n      case GraphAction.ADD_EDGE:\r\n        this.addEdge(param as GraphAddEdgeParams);\r\n        break;\r\n      case GraphAction.REMOVE_EDGE:\r\n        this.removeEdge(param as GraphRemoveEdgeParams);\r\n        break;\r\n      case GraphAction.REMOVE_EDGES:\r\n        this.removeEdges(param as GraphRemoveEdgesParams);\r\n        break;\r\n      case GraphAction.SET_NODE_HIGHLIGHT:\r\n        this.setNodeHighlight(param as GraphSetNodeHighlightParams);\r\n        break;\r\n      case GraphAction.CLEAR_NODE_HIGHLIGHT:\r\n        this.clearNodeHighlight(param as GraphClearNodeHighlightParams);\r\n        break;\r\n      case GraphAction.CLEAR_ALL_NODES_HIGHLIGHT:\r\n        this.clearAllNodesHighlight(param as GraphClearAllNodesHighlightParams);\r\n        break;\r\n      case GraphAction.SET_EDGE_HIGHLIGHT:\r\n        this.setEdgeHighlight(param as GraphSetEdgeHighlightParams);\r\n        break;\r\n      case GraphAction.SET_EDGES_HIGHLIGHT:\r\n        this.setEdgesHighlight(param as GraphSetEdgesHighlightParams);\r\n        break;\r\n      case GraphAction.CLEAR_EDGE_HIGHLIGHT:\r\n        this.clearEdgeHighlight(param as GraphClearEdgeHighlightParams);\r\n        break;\r\n      case GraphAction.CLEAR_EDGES_HIGHLIGHT:\r\n        this.clearEdgesHighlight(param as GraphClearEdgesHighlightParams);\r\n        break;\r\n      case GraphAction.CLEAR_ALL_EDGES_HIGHLIGHT:\r\n        this.clearAllEdgesHighlight(param as GraphClearAllEdgesHighlightParams);\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown GraphAction: ${action}`);\r\n    }\r\n  }\r\n\r\n  private addNode(param: GraphAddNodeParams): void {\r\n    if (!this._graphState.nodes.find((n) => n.id === param.id)) {\r\n      this._graphState.nodes.push({\r\n        id: param.id,\r\n        label: param.label ?? null,\r\n        highlightTags: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  private removeNode(param: GraphRemoveNodeParams): void {\r\n    this._graphState.nodes = this._graphState.nodes.filter((n) => n.id !== param.id);\r\n    this._graphState.edges = this._graphState.edges.filter(\r\n      (e) => e.source !== param.id && e.target !== param.id\r\n    );\r\n  }\r\n\r\n  private addEdge(param: GraphAddEdgeParams): void {\r\n    const sourceExists = this._graphState.nodes.some((n) => n.id === param.source);\r\n    const targetExists = this._graphState.nodes.some((n) => n.id === param.target);\r\n    const edgeExists = this._graphState.edges.some((e) => e.id === param.id);\r\n\r\n    if (sourceExists && targetExists && !edgeExists) {\r\n      this._graphState.edges.push({\r\n        id: param.id,\r\n        source: param.source,\r\n        target: param.target,\r\n        label: param.label ?? null,\r\n        highlightTags: [],\r\n      });\r\n    }\r\n  }\r\n\r\n  private removeEdge(param: GraphRemoveEdgeParams): void {\r\n    this._graphState.edges = this._graphState.edges.filter((e) => e.id !== param.id);\r\n  }\r\n\r\n  private removeEdges(param: GraphRemoveEdgesParams): void {\r\n    const { source, target } = param;\r\n\r\n    this._graphState.edges = this._graphState.edges.filter(e => {\r\n      if (this._graphState.isDirected) {\r\n        // Keep edges that do NOT match the given source/target\r\n        return !(e.source === source && e.target === target);\r\n      } else {\r\n        // For undirected, keep edges that match neither direction\r\n        return !(\r\n          (e.source === source && e.target === target) ||\r\n          (e.source === target && e.target === source)\r\n        );\r\n      }\r\n    });\r\n  }\r\n\r\n  private setNodeHighlight(param: GraphSetNodeHighlightParams): void {\r\n    const node = this._graphState.nodes.find((n) => n.id === param.id);\r\n    if (node) {\r\n      node.highlightTags = Array.from(new Set([...node.highlightTags, ...param.highlightTags]));\r\n    }\r\n  }\r\n\r\n  private clearNodeHighlight(param: GraphClearNodeHighlightParams): void {\r\n    const node = this._graphState.nodes.find((n) => n.id === param.id);\r\n    if (node) {\r\n      node.highlightTags = [];\r\n    }\r\n  }\r\n\r\n  private clearAllNodesHighlight(param: GraphClearAllNodesHighlightParams): void {\r\n    this._graphState.nodes.forEach(node => node.highlightTags = []);\r\n  }\r\n\r\n  private setEdgeHighlight(param: GraphSetEdgeHighlightParams): void {\r\n    const edge = this._graphState.edges.find((e) => e.id === param.id);\r\n    if (edge) {\r\n      edge.highlightTags = param.highlightTags;\r\n    }\r\n  }\r\n\r\n  private setEdgesHighlight(param: GraphSetEdgesHighlightParams): void {\r\n    const { source, target, highlightTags } = param;\r\n\r\n    this._graphState.edges.forEach(e => {\r\n      const matches = this._graphState.isDirected\r\n        ? e.source === source && e.target === target\r\n        : (e.source === source && e.target === target) || (e.source === target && e.target === source);\r\n\r\n      if (matches) {\r\n        e.highlightTags = highlightTags;\r\n      }\r\n    });\r\n  }\r\n\r\n  private clearEdgeHighlight(param: GraphClearEdgeHighlightParams): void {\r\n    const edge = this._graphState.edges.find((e) => e.id === param.id);\r\n    if (edge) {\r\n      edge.highlightTags = [];\r\n    }\r\n  }\r\n\r\n  private clearEdgesHighlight(param: GraphClearEdgesHighlightParams): void {\r\n    const { source, target } = param;\r\n\r\n    this._graphState.edges.forEach(e => {\r\n      const matches = this._graphState.isDirected\r\n        ? e.source === source && e.target === target\r\n        : (e.source === source && e.target === target) || (e.source === target && e.target === source);\r\n\r\n      if (matches) {\r\n        e.highlightTags = [];\r\n      }\r\n    });\r\n  }\r\n\r\n  private clearAllEdgesHighlight(param: GraphClearAllEdgesHighlightParams): void {\r\n    this._graphState.edges.forEach(e => e.highlightTags = []);\r\n  }\r\n\r\n  public getFrameState(): FrameState<GraphState> {\r\n    return {\r\n      id: this._id,\r\n      type: 'Graph',\r\n      state: this._graphState\r\n    };\r\n  }\r\n}\r\n","export enum LogAction {\r\n  SET_MESSAGE = 'SetMessage',\r\n  CLEAR_MESSAGE = 'ClearMessage',\r\n}","import { IFramer } from '../models/framer/i-framer.interface';\r\nimport { FrameState } from '../models/framer/frame-state.type';\r\nimport { Log } from '../models/framer/log/log.type';\r\nimport { LogAction } from '../models/recorder/log/log-action.enum';\r\nimport { LogSetMessageParams } from '../models/recorder/log/log-set-message-params.type';\r\nimport { LogState } from '../models/framer/log/log-state.type';\r\nimport { LogInitParams } from '../models/recorder/log/log-init-params.type';\r\n\r\nexport class LogFramer implements IFramer {\r\n  private _id: string;\r\n  private _log: Log;\r\n\r\n  public initialize(id: string, param: LogInitParams): void {\r\n    this._id = id;\r\n    this._log = {\r\n      name: param.name,\r\n      message: param.message ?? null,\r\n    };\r\n  }\r\n\r\n  public applyAction(action: string, param: unknown): void {\r\n    switch(action) {\r\n      case LogAction.SET_MESSAGE:\r\n        this.setMessage(param as LogSetMessageParams);\r\n        break;\r\n      case LogAction.CLEAR_MESSAGE:\r\n        this.clearMessage();\r\n        break;\r\n      default:\r\n        throw new Error(`Unknown LogAction: ${action}`);\r\n    }\r\n  }\r\n\r\n  private setMessage({ message }: LogSetMessageParams): void {\r\n    this._log.message = message;\r\n  }\r\n\r\n  private clearMessage(): void {\r\n    this._log.message = null;\r\n  }\r\n\r\n  public getFrameState(): FrameState<LogState> {\r\n    return {\r\n      id: this._id,\r\n      type: 'Log',\r\n      state: this._log,\r\n    };\r\n  }\r\n}\r\n","import { IFramer } from '../models/framer/i-framer.interface';\r\nimport { Recording } from '../models/recorder/recording.type';\r\nimport { Animation } from '../models/framer/animation.type';\r\nimport { GraphFramer } from './graph-framer';\r\nimport { Array2DFramer } from './array-2d-framer';\r\nimport { ChartFramer } from './chart-framer';\r\nimport { LogFramer } from './log-framer';\r\n\r\nexport class FramerEngine {\r\n  private readonly framerClassMap: Map<string, new () => IFramer> = new Map<string, new () => IFramer>([\r\n    ['Graph', GraphFramer],\r\n    ['Array2D', Array2DFramer],\r\n    ['Chart', ChartFramer],\r\n    ['Log', LogFramer]\r\n  ]);\r\n  private framerInstanceMap: Map<string, IFramer> = new Map();\r\n\r\n  public getAnimation(recording: Recording): Animation {\r\n    const animation: Animation = [];\r\n\r\n    for (const commandGroup of recording) {\r\n      for (const command of commandGroup) {\r\n        const { id, type, action, params } = command;\r\n\r\n        if (action === 'Init') {\r\n          this.initializeFramer(id, type, params);\r\n          continue;\r\n        }\r\n\r\n        if (action === 'Destroy') {\r\n          this.framerInstanceMap.delete(id);\r\n          continue;\r\n        }\r\n\r\n        const framerInstance = this.framerInstanceMap.get(id)!;\r\n\r\n        if (!framerInstance) {\r\n          throw new Error(`No framer has been initialized for type: ${type}, id: ${id}`);\r\n        }\r\n\r\n        framerInstance.applyAction(action, params);\r\n      }\r\n\r\n      if (this.framerInstanceMap.size === 0) {\r\n        continue;\r\n      }\r\n\r\n      animation.push(Array.from(this.framerInstanceMap.values()).map((framerInstance) => structuredClone(framerInstance.getFrameState())));\r\n    }\r\n\r\n    return animation;\r\n  }\r\n\r\n  private initializeFramer(id: string, type: string, params: unknown): void {\r\n    const framerClass = this.framerClassMap.get(type);\r\n\r\n    if (!framerClass) {\r\n      throw new Error(`No framer registered for type: ${type}`);\r\n    }\r\n\r\n    const framerInstance = new framerClass();\r\n    framerInstance.initialize(id, params);\r\n    this.framerInstanceMap.set(id, framerInstance);\r\n  }\r\n}\r\n"],"mappings":"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","names":["Array2DAction","ChartAction","GraphAction","LogAction"]}