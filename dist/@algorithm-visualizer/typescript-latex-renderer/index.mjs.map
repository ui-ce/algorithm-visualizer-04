{"version":3,"sources":["../../../modules/renderer/typescript-latex-renderer/src/renderers/array-2d-renderer.ts","../../../modules/renderer/typescript-latex-renderer/src/renderers/chart-renderer.ts","../../../modules/renderer/typescript-latex-renderer/src/renderers/graph-renderer.ts","../../../modules/renderer/typescript-latex-renderer/src/renderers/log-renderer.ts","../../../modules/renderer/typescript-latex-renderer/src/renderers/renderer-engine.ts"],"sourcesContent":["import { IRenderer } from '../models/renderer/i-renderer.interface';\r\nimport { Array2dState } from '../models/framer/array-2d/array-2d-state.type';\r\nimport { Array2DMetaData } from '../models/renderer/array-2d/array-2d-metadata.type';\r\n\r\nexport class Array2DRenderer implements IRenderer {\r\n  public render(state: Array2dState, metadata?: Array2DMetaData): string {\r\n    const lines: string[] = [];\r\n\r\n    // Configuration\r\n    const cellSize = 0.8;              // cm per cell side\r\n    const layerShrink = 0.1;           // cm shrink per highlight layer\r\n    const minHeight = metadata?.minHeight ?? 1; // minimum chart height in cm\r\n    const alignName = metadata?.alignName ?? 'center'; // 'center' | 'left' | 'right'\r\n\r\n    // Build tag → color mapping\r\n    const tagColors: Record<string, string> = {};\r\n    metadata?.highlightTags?.forEach(highlight => {\r\n      tagColors[highlight.tag] = highlight.color;\r\n    });\r\n    const defaultColor = metadata?.defaultColor ?? 'white';\r\n    const transparentColor = 'white!0'; // fully transparent\r\n\r\n    // Display name with page alignment\r\n    const flushMap = {\r\n      center: 'center',\r\n      left: 'flushleft',\r\n      right: 'flushright',\r\n    }\r\n    lines.push(`\\\\begin{${flushMap[alignName]}}\\\\textbf{${state.name}}\\\\\\\\[1.75mm]\\\\end{${flushMap[alignName]}}`);\r\n\r\n    lines.push(\"\\\\begin{tikzpicture}\");\r\n\r\n    const numRows = state.values.length;\r\n    const numCols = state.values[0]?.length ?? 1; // default 1 column if empty\r\n\r\n    const actualHeight = numRows * cellSize;\r\n    const bgHeight = Math.max(minHeight, actualHeight);\r\n\r\n    // Draw transparent background to enforce minHeight even if no cells\r\n    lines.push(\r\n      `  \\\\filldraw[fill=${transparentColor}, draw=none] (0cm,0cm) rectangle (${numCols * cellSize}cm, -${bgHeight}cm);`\r\n    );\r\n\r\n    // Draw actual cells if any\r\n    state.values.forEach((row, rowIndex) => {\r\n      row.forEach((cell, colIndex) => {\r\n        const x = colIndex * cellSize;\r\n        const y = -(rowIndex * cellSize);\r\n\r\n        if (cell.highlightTags.length > 0) {\r\n          cell.highlightTags.forEach((tag, layerIndex) => {\r\n            const fill = tagColors[tag] ?? defaultColor;\r\n            const shrink = layerShrink * layerIndex;\r\n            const xStart = x + shrink;\r\n            const xEnd = x + cellSize - shrink;\r\n            const yStart = y - cellSize + shrink;\r\n            const yEnd = y - shrink;\r\n            lines.push(\r\n              `  \\\\filldraw[fill=${fill}] (${xStart}cm,${yStart}cm) rectangle (${xEnd}cm,${yEnd}cm);`\r\n            );\r\n          });\r\n        } else {\r\n          lines.push(\r\n            `  \\\\filldraw[fill=${defaultColor}] (${x}cm,${y - cellSize}cm) rectangle (${x + cellSize}cm,${y}cm);`\r\n          );\r\n        }\r\n\r\n        // Draw value centered in the cell\r\n        lines.push(\r\n          `  \\\\node at (${x + cellSize / 2}cm,${y - cellSize / 2}cm) {${cell.value}};`\r\n        );\r\n      });\r\n    });\r\n\r\n    lines.push(\"\\\\end{tikzpicture}\");\r\n    return lines.join(\"\\n\");\r\n  }\r\n}\r\n","import { IRenderer } from '../models/renderer/i-renderer.interface';\r\nimport { ChartState } from '../models/framer/chart/chart-state.type';\r\nimport { ChartMetaData } from '../models/renderer/chart/chart-metadata.type';\r\n\r\nexport class ChartRenderer implements IRenderer {\r\n  public render(state: ChartState, metadata?: ChartMetaData): string {\r\n    const lines: string[] = [];\r\n\r\n    if (state.bars.length === 0) {\r\n      return `\\\\textbf{${state.name}}`;\r\n    }\r\n\r\n    // Configuration variables with defaults\r\n    const barWidth = metadata?.barWidth ?? 0.5;\r\n    const barGap = metadata?.barGap ?? 0.2;\r\n    const chartHeight = metadata?.chartHeight ?? 3.5; // static chart height in cm\r\n    const showLabel = metadata?.showLabel ?? true;\r\n    const showValue = metadata?.showValue ?? true;\r\n    const alignName = metadata?.alignName ?? 'center'; // 'center' | 'left' | 'right'\r\n\r\n    // Build tag → color mapping\r\n    const tagColors: Record<string, string> = {};\r\n    metadata?.highlightTags?.forEach(tag => {\r\n      tagColors[tag.tag] = tag.color;\r\n    });\r\n    const defaultColor = metadata?.defaultColor ?? 'gray!30';\r\n    const transparentColor = 'white!0'; // fully transparent\r\n\r\n    // Display chart name\r\n    const flushMap = {\r\n      center: 'center',\r\n      left: 'flushleft',\r\n      right: 'flushright',\r\n    }\r\n    lines.push(`\\\\begin{${flushMap[alignName]}}\\\\textbf{${state.name}}\\\\\\\\[1.75mm]\\\\end{${flushMap[alignName]}}`);\r\n\r\n    lines.push('\\\\begin{tikzpicture}');\r\n\r\n    const values = state.bars.map(b => b.value);\r\n    const maxValue = Math.max(...values, 1); // at least 1 to avoid division by zero\r\n    const scale = chartHeight / maxValue;\r\n\r\n    state.bars.forEach((bar, i) => {\r\n      const x = i * (barWidth + barGap);\r\n      const height = bar.value * scale;\r\n\r\n      // 1️⃣ Draw full-height transparent base bar\r\n      lines.push(\r\n        `  \\\\filldraw[fill=${transparentColor}, draw=none] (${x}cm,0) rectangle (${x + barWidth}cm,${chartHeight}cm);`\r\n      );\r\n\r\n      // 2️⃣ Draw actual value/highlights on top\r\n      if (bar.highlightTags.length > 0) {\r\n        const layerShrink = 0.1;\r\n        bar.highlightTags.forEach((tag, layerIndex) => {\r\n          const fill = tagColors[tag] ?? defaultColor;\r\n          const xStart = x + layerShrink * layerIndex;\r\n          const xEnd = x + barWidth - layerShrink * layerIndex;\r\n          const yStart = layerShrink * layerIndex;\r\n          const yEnd = height - layerShrink * layerIndex;\r\n          lines.push(`  \\\\filldraw[fill=${fill}] (${xStart}cm,${yStart}cm) rectangle (${xEnd}cm,${yEnd}cm);`);\r\n        });\r\n      } else if (bar.value > 0) {\r\n        lines.push(`  \\\\filldraw[fill=${defaultColor}] (${x}cm,0) rectangle (${x + barWidth}cm,${height}cm);`);\r\n      }\r\n\r\n      if (showValue) {\r\n        lines.push(`  \\\\node[above] at (${x + barWidth / 2}cm,${height}cm) {${bar.value}};`);\r\n      }\r\n\r\n      if (showLabel && bar.label) {\r\n        lines.push(`  \\\\node[below] at (${x + barWidth / 2}cm,0) {${bar.label}};`);\r\n      }\r\n    });\r\n\r\n    lines.push('\\\\end{tikzpicture}');\r\n    return lines.join('\\n');\r\n  }\r\n}\r\n","import { IRenderer } from '../models/renderer/i-renderer.interface';\r\nimport { GraphState } from '../models/framer/graph/graph-state.type';\r\nimport { GraphMetaData } from '../models/renderer/graph/graph-metadata.type';\r\n\r\nexport class GraphRenderer implements IRenderer {\r\n  public render(state: GraphState, metadata?: GraphMetaData): string {\r\n    const lines: string[] = [];\r\n    const nodeCount = state.nodes.length;\r\n    const radius = 3; // cm\r\n\r\n    // Configuration\r\n    const minHeight = metadata?.minHeight ?? 3; // cm\r\n    const alignName = metadata?.alignName ?? 'center'; // left | center | right\r\n\r\n    // LaTeX flush mapping\r\n    const flushMap: Record<string, string> = {\r\n      center: 'center',\r\n      left: 'flushleft',\r\n      right: 'flushright',\r\n    };\r\n\r\n    // Display graph name with alignment\r\n    lines.push(`\\\\begin{${flushMap[alignName]}}\\\\textbf{${state.name}}\\\\\\\\[2mm]\\\\end{${flushMap[alignName]}}`);\r\n\r\n    // Reserve minHeight space\r\n    lines.push(\"\\\\begin{tikzpicture}\");\r\n    lines.push(`  \\\\filldraw[fill=white!0, draw=none] (-${radius + 1}cm,0) rectangle (${radius + 1}cm, -${minHeight}cm);`);\r\n\r\n    if (nodeCount === 0) {\r\n      lines.push(\"\\\\end{tikzpicture}\");\r\n      return lines.join(\"\\n\");\r\n    }\r\n\r\n    // Build mappings of highlightTag → color\r\n    const nodeTagColors: Record<string, string> = {};\r\n    metadata?.nodeHighlightTags?.forEach(tag => {\r\n      nodeTagColors[tag.tag] = tag.color;\r\n    });\r\n\r\n    const edgeTagColors: Record<string, string> = {};\r\n    metadata?.edgeHighlightTags?.forEach(tag => {\r\n      edgeTagColors[tag.tag] = tag.color;\r\n    });\r\n\r\n    const defaultNodeColor = metadata?.defaultNodeColor ?? 'white';\r\n    const defaultEdgeColor = metadata?.defaultEdgeColor ?? 'black';\r\n\r\n    // Draw nodes\r\n    state.nodes.forEach((node, i) => {\r\n      const angle = (360 * i / nodeCount).toFixed(1);\r\n\r\n      const highlightTag = node.highlightTags[node.highlightTags.length - 1];\r\n      const fillColor = highlightTag ? nodeTagColors[highlightTag] ?? defaultNodeColor : defaultNodeColor;\r\n\r\n      const label = node.label ? node.label.replace(/([_%&])/g, '\\\\$1') : '';\r\n\r\n      lines.push(`  \\\\node[circle, draw, minimum size=8mm, fill=${fillColor}] (${node.id}) at (${angle}:${radius}cm) {${label}};`);\r\n    });\r\n\r\n    // Draw edges\r\n    state.edges.forEach(edge => {\r\n      const highlightTag = edge.highlightTags[edge.highlightTags.length - 1];\r\n      const drawColor = highlightTag ? edgeTagColors[highlightTag] ?? defaultEdgeColor : defaultEdgeColor;\r\n\r\n      const edgeOptions = `${drawColor}, line width=1.2pt`;\r\n\r\n      if (edge.label) {\r\n        const safeEdgeLabel = edge.label.replace(/([_%&])/g, '\\\\$1');\r\n        lines.push(`  \\\\draw[${edgeOptions}] (${edge.source}) -- node[midway, sloped, above] {${safeEdgeLabel}} (${edge.target});`);\r\n      } else {\r\n        lines.push(`  \\\\draw[${edgeOptions}] (${edge.source}) -- (${edge.target});`);\r\n      }\r\n    });\r\n\r\n    lines.push(\"\\\\end{tikzpicture}\");\r\n    return lines.join(\"\\n\");\r\n  }\r\n}\r\n","import { IRenderer } from '../models/renderer/i-renderer.interface';\r\nimport { LogState } from '../models/framer/log/log-state.type';\r\nimport { LogMetaData } from '../models/renderer/log/log-metadata.type';\r\n\r\nexport class LogRenderer implements IRenderer {\r\n  public render(state: LogState, metadata?: LogMetaData): string {\r\n    const lines: string[] = [];\r\n\r\n    // Configuration defaults\r\n    const defaultColor = metadata?.defaultColor ?? 'black';\r\n    const minHeight = metadata?.minHeight ?? 0.25; // cm\r\n    const alignName = metadata?.alignName ?? 'center'; // left | center | right\r\n\r\n    // Mapping for LaTeX flush environments\r\n    const flushMap: Record<string, string> = {\r\n      center: 'center',\r\n      left: 'flushleft',\r\n      right: 'flushright',\r\n    };\r\n\r\n    // Display name with alignment\r\n    lines.push(`\\\\begin{${flushMap[alignName]}}\\\\textbf{${state.name}}\\\\\\\\[1.75mm]\\\\end{${flushMap[alignName]}}`);\r\n\r\n    // Reserve space for minHeight\r\n    lines.push(`\\\\begin{tikzpicture}`);\r\n    lines.push(`  \\\\filldraw[fill=white!0, draw=none] (0,0) rectangle (10cm, -${minHeight}cm);`);\r\n\r\n    // Draw the message centered if exists\r\n    if (state.message) {\r\n      lines.push(`  \\\\node[anchor=north, align=center, text=${defaultColor}] at (5cm,0) {\\\\texttt{${state.message}}};`);\r\n    }\r\n\r\n    lines.push(`\\\\end{tikzpicture}`);\r\n\r\n    return lines.join('\\n');\r\n  }\r\n}\r\n","import { Animation } from '../models/framer/animation.type';\r\nimport { GraphRenderer } from './graph-renderer';\r\nimport { IRenderer } from '../models/renderer/i-renderer.interface';\r\nimport { Frame } from '../models/framer/frame.type';\r\nimport { FrameState } from '../models/framer/frame-state.type';\r\nimport { Array2DRenderer } from './array-2d-renderer';\r\nimport { ChartRenderer } from './chart-renderer';\r\nimport { LogRenderer } from './log-renderer';\r\nimport { RendererMetadata } from '../models/renderer/renderer-metadata.type';\r\nimport { ObjectMetaDataEntry } from '../models/renderer/object-metadata-entry.type';\r\n\r\nexport class RendererEngine {\r\n  private readonly renderersMap: Map<string, IRenderer> = new Map<string, IRenderer>([\r\n    ['Graph', new GraphRenderer()],\r\n    ['Array2D', new Array2DRenderer()],\r\n    ['Chart', new ChartRenderer()],\r\n    ['Log', new LogRenderer()]\r\n  ]);\r\n\r\n  public render(animation: Animation, rendererMetadata: RendererMetadata): string {\r\n    const showLine = rendererMetadata.showLine ?? true;\r\n    const documentName = rendererMetadata.documentName ?? 'Algorithm';\r\n    const document: string[] = [];\r\n\r\n    // Document header\r\n    document.push(\"\\\\documentclass{article}\");\r\n    document.push(\"\\\\usepackage{tikz}\");\r\n    document.push(\"\\\\usetikzlibrary{matrix}\");\r\n    document.push(\"\\\\usepackage[margin=1in]{geometry}\");\r\n    document.push(\"\\\\begin{document}\");\r\n\r\n    // Render each frame\r\n    animation.forEach((frame: Frame, frameIndex: number) => {\r\n      document.push(`% --- Frame ${frameIndex} ---`);\r\n\r\n      // Show document name at the top of each page (if provided)\r\n      if (documentName) {\r\n        document.push(`\\\\begin{center}\\\\LARGE\\\\textbf{${documentName}}\\\\\\\\[6mm]\\\\end{center}`);\r\n      }\r\n\r\n      frame.forEach(({ type, state }: FrameState, index: number) => {\r\n        const renderer = this.renderersMap.get(type);\r\n        if (!renderer) {\r\n          throw new Error(`No renderer registered for type: ${type}`);\r\n        }\r\n\r\n        const objectMetaDataEntry: ObjectMetaDataEntry = rendererMetadata.objectMetaData?.find(m => m.type === type);\r\n        const metadata = objectMetaDataEntry?.metadata;\r\n\r\n        // Wrap each renderer output in center\r\n        document.push(\"\\\\begin{center}\");\r\n        document.push(renderer.render(state, metadata));\r\n        document.push(\"\\\\end{center}\");\r\n\r\n        // Draw a horizontal line between renderers (except after last one)\r\n        if (showLine && index < frame.length - 1) {\r\n          document.push(\"\\\\noindent\\\\rule{\\\\linewidth}{0.3pt}\");\r\n        }\r\n      });\r\n\r\n      // Only insert \\newpage if it's not the last frame\r\n      if (frameIndex < animation.length - 1) {\r\n        document.push(\"\\\\newpage\");\r\n      }\r\n    });\r\n\r\n    // Document footer\r\n    document.push(\"\\\\end{document}\");\r\n\r\n    return document.join(\"\\n\");\r\n  }\r\n}\r\n"],"mappings":"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","names":[]}